---
title: "Script_experimentação"
subtitle: "Delineamento em Alpha-lattice"
author: "Jennifer Lopes"
format: html
editor: visual
---

-   **Efeitos Fixos**: Representam fatores de interesse específico que se quer avaliar diretamente.

-   Os genótipos são tratados como efeitos fixos quando o objetivo é entender o impacto de cada um na variável de resposta, como o rendimento.

-   As estimativas associadas são chamadas de BLUEs (Best Linear Unbiased Estimates).

-   **Efeitos Aleatórios**: Representam fatores vistos como uma amostra de uma população maior, com foco na variabilidade entre os níveis.

-   Ao tratar os genótipos como efeitos aleatórios, as estimativas são chamadas de BLUPs (Best Linear Unbiased Predictions).

-   Esse tipo de modelagem ajuda a entender a variabilidade entre genótipos e a prever a resposta esperada de um genótipo de uma população.

-   Exemplos incluem blocos e parcelas ou os próprios genótipos, quando vistos como uma amostra da população.

## O que queremos responder com esse experimento?

1.  Qual é o efeito dos genótipos sobre o rendimento?

Avaliar o impacto dos genótipos no rendimento, considerando-os como efeitos fixos em um modelo misto (mod.fg) e como efeitos aleatórios em outro (mod.rg).

2.  Quais genótipos têm as melhores performances médias ajustadas (BLUEs) ou predições (BLUPs)?

Comparar as estimativas dos genótipos em termos de BLUEs e BLUPs para escolher aqueles com melhores desempenhos.

3.  Qual é a herdabilidade associada aos genótipos?

Calcular a herdabilidade para avaliar a proporção de variabilidade que é geneticamente determinada e o potencial de seleção.

4.  Realizar uma análise de agrupamento hierárquico para identificar a similaridade genética.

<!-- -->

4.  Qual a correlação entre as estimativas BLUE e BLUP?

## Instalação e carregamento dos pacotes

**Se ainda não tiver o pacman() instalado, instale com:**

```{r}
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
```

```{r}

pacman::p_load(
    broom,         # Converte modelos estatísticos em data frames organizados
    broom.mixed,   # Extensão do broom para modelos mistos
    desplot,       # Visualizações para dados espaciais
    emmeans,       # Estimativas de médias marginais e comparações
    ggpubr,        # Ferramentas para aprimorar gráficos com ggplot2
    lme4,          # Modelos lineares e não-lineares mistos
    lmerTest,      # Testes de significância para modelos lineares mistos
    multcomp,      # Testes de comparações múltiplas
    multcompView,  # Visualizações de comparações múltiplas
    plotly,        # Gráficos interativos
    tidyverse,     # Coleção de pacotes para manipulação e visualização de dados
    writexl,)     # Exportação de data frames para arquivos Excel (.xlsx)

```

## Importando os dados

```{r}

dados <- alpha_lattice
```

#### Sobre os dados

```{r}
dplyr::glimpse(glimpse(dados))
```

-   **`rep`**: representa a repetição do experimento.

-   **`inc.bloco`**: representa os blocos incompletos dentro de cada repetição.

-   **`gen`**: representa os genótipos.

-   **`prod`**: representa a variável de resposta.

-   **`row`**: localização espacial do `GEN` na linha.

-   **`col`**: localização espacial do `GEN` na coluna.

## Transformando efeitos em fatores

-   Separação por níveis e a variável será considerada categórica;

-   Cada nível do fator pode ter seu próprio efeito estimado.

```{r}

dados$gen <- as.factor(dados$gen)

dados$rep <- as.factor(dados$rep)

dados$inc.bloco <- as.factor(dados$inc.bloco)

```

## Croqui de campo

#### Utilizando o pacote ggplot2()

```{r}

croqui <- dados %>% 
  ggplot(aes(x = col, y = row, fill = inc.bloco )) +
  geom_tile(color = "black")+
  geom_text(aes(label = gen))+
  theme_bw() +
  
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  
  facet_wrap(~ rep, scales = "free_x")+
  labs(title = "Croqui de campo",
       x= "Colunas", y= "Linhas",
       caption = "SIGM, 2024.")

croqui
```

#### Utilizando o pacote desplot()

[Pacote desplot- Acesse documentação em pdf.](https://cloud.r-project.org/web/packages/desplot/desplot.pdf)

```{r}

desplot::desplot(data = dados,
        form = gen ~ col + row | rep,          
        text = gen, cex = 0.7, shorten = "no", 
        out1 = rep,                            
        out2 = inc.bloco,                      
        main = "Croqui de campo - SIGM 2024.", show.key = T)

```

## Análise descritiva

```{r}

# Funçãoo desc_stat() ----------------------------------------------------
# Para calcular todas as estatísticas de uma só vez


# CV, máximo, média, mediana, mínimo, desvio padrão da amostra
# erro padrão e intervalo de confianca da média
# stats = "main"= emite 7 tipos de estatísticas

dados %>%
  metan::desc_stat(prod, hist = TRUE, stats = "main")
```

## Análise exploratória

#### Análise da repetição

```{r}
dados %>% 
  group_by(rep) %>% 
  summarize(mean    = mean(prod),
            std.dev = sd(prod),
            cv      = std.dev/mean)
```

#### Análise dos blocos incompletos

```{r}

dados %>% 
  group_by(rep, inc.bloco) %>% 
  summarize(mean    = mean(prod),
            std.dev = sd(prod),
            cv      = std.dev/meam,
            median  = median(prod))
```

```{r}
dados %>% 
  ggplot(aes(x = gen, y = prod, fill = gen))+
  geom_boxplot(show.legend = F)+
  theme_classic()+
  labs(title = "Distribuição da produtividade por genótipo", 
       x= "Genótipo", y= "Produção",
       caption = "SIGM 2024.")
```

## Modelagem

Redução de Viés: a inclusão de efeitos aleatórios ajuda a lidar com a variação aleatória entre blocos ou parcelas, tornando as estimativas dos efeitos fixos mais robustas.

Estimativas de Herdabilidade.

#### **Modelo com `gen` como efeito fixo:**

**Objetivo:** o modelo ajusta a produção (prod) considerando os genótipos como efeito fixo, para estimar o efeito de cada genótipo. Também leva em conta as repetições como efeitos fixos e a variação dentro dos blocos incompletos como um efeito aleatório.

```{r}

mod.fg <- lmer(prod ~ gen + rep + (1 | rep:inc.bloco), data = dados)

```

-   **`prod ~ gen`**: `gen` é um efeito fixo porque queremos saber o efeito de cada genótipo.

-   **`(1|bloco)`**: `bloco` é um efeito aleatório, permitindo controlar a variação entre os blocos do experimento dentro de cada repetição, ajudando a controlar a variabilidade ambiental e aumentando a precisão da análise dos genótipos.

Importante: (1 \| rep:inc.bloco) indica que estamos tratando cada bloco dentro de cada repetição como uma unidade de agrupamento, e o 1 significa que queremos um intercepto (média) aleatório para cada uma dessas unidades.

#### **Modelo com `gen` como efeito aleatório:**

O modelo ajusta a produção (prod) considerando os genótipos como efeitos aleatórios, para estimar a variabilidade genética na população. Também leva em conta as repetições como efeitos fixos e a variação dentro dos blocos incompletos como um efeito aleatório.

```{r}
mod.rg <- lmer(prod ~ (1 | gen) + rep + (1 | rep:inc.bloco), data = dados)

```

1.  **`(1 | gen)`**: representa um **efeito aleatório** do fator `gen` (genótipos). (BLUPs)

2.  **`rep`**: representa um **efeito fixo** do fator `rep` (repetição). Isso significa que as repetições são tratadas como um fator cujos níveis específicos interessam diretamente na análise, e queremos avaliar o impacto médio desse fator na variável de resposta.

3.  **`(1 | rep:inc.bloco)`**: representa um **efeito aleatório de interação** entre `rep` (repetição) e `inc.bloco` (bloco incompleto). Isso é útil para capturar a variação não explicada entre blocos que estão dentro das repetições, controlando de forma mais precisa a variabilidade experimental.

Isso permite estimar os componentes de variância atribuíveis aos genótipos e não comparar diretamente os níveis de genótipos.

## Análise dos modelos e comparação

### O que é o REML?

-   Verossimilhança?

-   Conjunto de dados, para nossa variável prod, assumo que ela segue uma distribuição normal com média e desvio padrão específicos, a verossimilhança calcula a probabilidade de ver esse conjunto de dados/prod observadas segue esses parâmetros da distribuição.

-   **REML** é um método que maximiza a verossimilhança das componentes de variância ao excluir o efeito dos parâmetros fixos (como médias ou tendências lineares). Ele faz isso decompondo os resíduos e ajustando a variância com base nas partes não explicadas pelos efeitos fixos.

-   É chamado de "restricted" porque usa a verossimilhança residual, que é baseada nas combinações lineares das observações que não dependem dos efeitos fixos.

-   Quanto menor o valor do critério REML, melhor o ajuste do modelo para os dados (desde que se esteja comparando modelos aninhados com a mesma estrutura de efeitos fixos).

#### Resumo do modelo fixo

```{r}
summary(mod.fg, ddf = "Kenward-Roger")

```

#### Resumo do modelo aleatório

```{r}
summary(mod.rg, ddf = "Kenward-Roger")
```

[^1]Kenward-Roger: para calcular os graus de liberdade para os efeitos- Modelos Mistos e para obtenção de um teste F mais robusto.

[^1]: Kenward, M.G. e Roger, J. H. (1997). Small Sample Inference for Fixed Effects from Restricted Maximum Likelihood. Biometrics, Vol 53, No. 3 pp 983-997 

#### ANOVA efeitos fixos, usamos:

-   Testar se as médias dos grupos (ou níveis dos fatores) são significativamente diferentes entre si.

```{r}
mod.fg %>% anova(ddf = "Kenward-Roger")

```

#### ANOVA efeitos aleatório, usamos:

-   Avaliar a variabilidade entre os níveis dos fatores considerados como amostras de uma população.

```{r}
mod.rg %>% anova(ddf = "Kenward-Roger")
```

#### RANOVA para efeitos aleatórios:

-   Traz informações sobre a importância do efeito aleatório.

-   Modelo completo x modelo reduzido

-   npar: número de parâmetros no modelo.

-   logLik: Log-verossimilhança do modelo- valores mais altos (menos negativos) indicam um ajuste melhor.

-   AIC (Akaike Information Criterion): valores menores indicam melhor ajuste.

-   LRT (Likelihood Ratio Test): teste de razão de verossimilhança para avaliar a significância do efeito aleatório.

-   Df: Graus de liberdade para o teste LRT. 1 grau de liberdade, pois estamos removendo um único efeito aleatório.

-   Pr(\>Chisq): Valor p associado ao teste LRT. (é significativo? devo removê-lo?)

```{r}
mod.fg %>% ranova() 
```

```{r}
mod.rg %>% ranova()

```

-   O efeito aleatório de `gen` é significativo e deve ser mantido, enquanto o efeito de `rep:inc.bloco` pode ser removido?

-   **`Modelo reduzido: Ignora essa variação adicional de blocos e ajusta apenas os efeitos fixos gen e rep.`**

-   **`O efeito (1 | rep:inc.bloco) não é significativo, o modelo reduzido é suficiente para explicar prod , simplificando a interpretação e economizando parâmetros.`**

-   **ANOVA**: compara a significância dos efeitos fixos.

-   **RANOVA**: testa a significância dos componentes de variância aleatórios.

## Estimativa dos Componentes da Variância

-   vcov (Variance Component): variância associada a cada componente.

-   sdcor (Standard Deviation of the Component): desvio padrão de cada componente de variância.

```{r}

# Pacote lme4

as.data.frame(VarCorr(mod.fg))

```

-   A maior parte da variabilidade em prod é atribuída ao componente residual, indicando que o modelo não captura toda a variação na resposta, sugerindo talvez um ajuste ou consideração de variáveis adicionais para explicar essa variabilidade.

```{r}

# Pacote lme4

as.data.frame(VarCorr(mod.rg))
```

-   A inclusão de gen como um efeito aleatório no modelo permite capturar a variabilidade entre diferentes níveis de gen , enquanto rep:inc.bloco captura a variação adicional entre blocos.

-   O componente residual é o maior contribuinte para a variância total, indicando que, apesar dos efeitos aleatórios, ainda há uma quantidade significativa de variabilidade não explicada.

Como reduzir o erro residual dos componentes da variancia??

```{r}
# mod.novo <- (prod ~ gen + rep + nova_var + (1 | rep:inc.bloco), data = dados)
```

## Estimativas BLUEs e BLUPs

#### BLUEs (Best Linear Unbiased Estimators)

-   Em estatística, um BLUE é um estimador linear que é o mais preciso (ou seja, tem a menor variância) e não tendencioso para um parâmetro específico.

-   No contexto de modelos de efeitos mistos, o BLUE é frequentemente usado para descrever as estimativas dos efeitos fixos, já que estes são obtidos de maneira que minimizam o erro, enquanto permanecem imparciais.

Para o modelo com `gen` como fixo, calculamos as médias ajustadas dos genótipos:

-   BLUE = emmean : amédia marginal estimada (emmean) representa o BLUE para cada nível de gen.

-   BLUEs fornecem as médias ajustadas para gen, levando em conta o ajuste do modelo para rep e rep:inc.bloco.

-   Essas estimativas são úteis para comparar os níveis de gen enquanto controlamos para outras fontes de variação (como blocos e replicações).

```{r}
BLUEs <- emmeans::emmeans(mod.fg, ~ gen) %>%
  as.data.frame() %>%
  transmute(gen, BLUE = emmean, std.error_BLUE = SE)
```

```{r}
head(BLUEs)
```

Intervalo de confiança de 95% em vez de um erro padrão simples, você poderia multiplicar `std.error_BLUE` por 1.96:

```{r}

ggplot2::ggplot(BLUEs, aes(x = gen, y = BLUE)) +
  
  geom_point(color = "blue", size = 3) +
  
  geom_errorbar(
    aes(
      ymin = BLUE - 1.96 * std.error_BLUE,
      ymax = BLUE + 1.96 * std.error_BLUE),
    width = 0.2,
    color = "gray") +
  
  labs(
    title = "Estimativas BLUEs",
    x = "Genótipos",
    y = "BLUE (Best Linear Unbiased Estimator)",
    caption = "SIGM,2024.") +
  
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

#### BLUPs (Best Linear Unbiased Predictors)

-   Para o modelo `mod.rg`, calculamos os BLUPs dos genótipos:

-   fixef(mod.rg) : extrai os coeficientes de efeitos fixos do modelo misto mod.rg.

-   fixef(mod.rg)\[1\] : intercepto do modelo, ou seja, a média geral (μ).

-   fixef(mod.rg)\[2:3\] : seleciona outros efeitos fixos, que podem representar variáveis adicionais no modelo, como blocos.

-   sum(fixef(mod.rg)\[2:3\])/3 : assumimos que os efeitos fixos (excluindo o intercepto) precisam ser ajustados na média; neste caso, somamos e dividimos por 3, embora esse ajuste dependa do modelo e do contexto.

```{r}

# média ajustada

mu_manual <- fixef(mod.rg)[1] + sum(fixef(mod.rg)[2:3])/3

```

```{r}

BLUPs <- augment(ranef(mod.rg)) %>%  # transforma em df os compon do mod.rg
  filter(grp == "gen") %>% # efeitos aleatórios associados ao "gen"
  transmute(gen = level, BLUP = mu_manual + estimate, std.error_BLUP = std.error)

BLUPs
```

Os BLUPs que calculamos representam a média esperada para cada genótipo ajustada pelos efeitos específicos de cada um, considerando o intercepto (ou média geral) do modelo e os desvios dos efeitos aleatórios.

## Herdabilidade

A herdabilidade indica a proporção da variabilidade fenotípica que é atribuível à variabilidade genética.

#### Herdabilidade Clássica

$$
h^2 = \frac{V_g}{V_g + \frac{V_e}{n}}
$$ onde ( V_g ) é a variância dos genótipos e ( V_e ) é o erro residual.

#### Extração das Componentes da Variância:

```{r}
vcomps <- as.data.frame(VarCorr(mod.rg))

vcomps

```

#### Seleção da Variância Genética:

```{r}

vc.g <- vcomps[vcomps$grp == "gen", "vcov"]

vc.g

```

#### Seleção da Variância Residual

```{r}

vc.e <- vcomps[vcomps$grp == "Residual", "vcov"]

vc.e

```

#### Cálculo da Herdabilidade

```{r}

nreps = 3

hc <- vc.g / (vc.g + vc.e / nreps)

hc

```

## Plotando os BLUPs

```{r}

head(BLUPs)
```

#### Cálculo do intervalo de confiança

```{r}

# Nível de confiança (95%)

nivel_confianca <- 0.95
z_value <- qnorm((1 + nivel_confianca) / 2)


```

#### Calcula os limites superior e inferior para o intervalo de confiança

```{r}

BLUPs <- BLUPs %>%
  mutate(
    IC_inferior = BLUP - z_value * std.error_BLUP,
    IC_superior = BLUP + z_value * std.error_BLUP)

BLUPs

```

```{r}
media_blup <- mean(BLUPs$BLUP)

head(media_blup)
```

```{r}

BLUPs <- BLUPs %>%
  arrange(desc(BLUP)) %>%
  mutate(gen = factor(gen, levels = gen))

BLUPs
```

```{r}

gblup <- ggplot(BLUPs, aes(x = gen, y = BLUP)) +
  geom_bar(
    stat = "identity",
    fill = "#588157",
    color = "black",
    width = 0.7) +
  
  geom_errorbar(aes(ymin = IC_inferior, ymax = IC_superior), width = 0.2) +
  geom_hline(
    yintercept = media_blup,
    color = "red",
    linetype = "dashed",
    size = 0.8) +
  
  theme_minimal() +
  labs(
    title = "",
    x = "Genótipos",
    y = "Valor Predito",
    caption = "SIGM, 2024.") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
gblup
```

## Análise de grupamento

```{r}

# Calcula a distância euclidiana

blup_values <- BLUPs$BLUP

names(blup_values) <- BLUPs$gen  # nomeia cada valor com o genótipo correspondente
```

```{r}

dist_blups <- dist(blup_values, method = "euclidean")  

hc <- hclust(dist_blups, method = "average")  # UPGMA (média)

```

```{r}

# Define o valor de Mojena para o ponto de corte

c_value <- 1.25 

heights <- hc$height

cut_height <- mean(heights) + c_value * sd(heights)
```

```{r}

# Plot do dendrograma com o ponto de corte de Mojena
plot(
  hc,
  main = "Dendrograma",
  xlab = "Genótipos",
  ylab = "Distância",
  cex = 0.8,
  sub = "")

abline(
  h = cut_height,
  col = "red",
  lty = 2,
  lwd = 1.5)  # Linha de corte

# Determina os clusters com o ponto de corte de Mojena
cluster_groups <- cutree(hc, h = cut_height)

# Adiciona os clusters ao data frame
BLUPs <- BLUPs %>% mutate(cluster = factor(cluster_groups[gen]))

# Exibe o data frame com as informações dos clusters
head(BLUPs)

```

```{r}
cophenetic_dist <- cophenetic(hc)

# Calcula a correlação cofenética

correlation_cophenetic <- cor(dist_blups, cophenetic_dist)

print(paste("Correlação cofenética:", round(correlation_cophenetic, 4)))
```

## Regressão

```{r}
raw_m <- dados %>% 
  group_by(gen) %>% 
  summarize(mean    = mean(prod),
            std.dev = sd(prod),
            cv      = std.dev/mean, 
            n = n() ,
            n_mis = sum(is.na(prod))) 
raw_m
```

```{r}
pvals <- merge(BLUEs, BLUPs, by = "gen")
pvals <- merge(pvals, raw_m, by = "gen")
```

```{r}

ggreg <- pvals %>%
  ggplot(aes(x = BLUE, y = BLUP)) +
  geom_smooth(
    se = F,
    color = "red",
    size = 0.8,
    method = "lm",
    formula = y ~ x) +
  
  geom_abline(
    slope = 1,
    intercept = 0,
    color = "black",
    size = 0.8,
    linetype = 2) +
  
  geom_point(size = 3, alpha = 0.5) +
  stat_regline_equation() +
  theme_bw() +
  coord_fixed()

ggreg
```