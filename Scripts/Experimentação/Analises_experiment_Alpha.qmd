---
title: "Script_experimentação"
subtitle: "Delineamento em Alpha-lattice"
author: "Jennifer Lopes"
format: html
editor: visual
---

## Instalação e carregamento dos pacotes

**Se ainda não tiver o pacman() instalado, instale com:**

```{r}
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
```

```{r}
pacman::p_load(lmerTest, lme4, broom, plotly, tidyverse, desplot, broom.mixed, emmeans, multcomp, multcompView, ggpubr, writexl)
```

## Importando os dados

```{r}

dados <- alpha_lattice

```

#### Sobre os dados

```{r}
dplyr::glimpse(glimpse(dados))
```

-   **`rep`**: representa a repetição do experimento.

-   **`inc.bloco`**: representa os blocos incompletos dentro de cada repetição.

-   **`gen`**: representa os genótipos.

-   **`prod`**: representa a variável de resposta.

-   **`row`**: localização espacial do `GEN` na linha.

-   **`col`**: localização espacial do `GEN` na coluna.

## Transformando efeitos em fatores

-   Separação por níveis e a variável será considerada categórica;

-   Cada nível do fator pode ter seu próprio efeito estimado.

```{r}

dados$gen <- as.factor(dados$gen)

dados$rep <- as.factor(dados$rep)

dados$inc.bloco <- as.factor(dados$inc.bloco)
```

## Croqui de campo

#### Utilizando o pacote ggplot2()

```{r}

croqui <- dados %>% 
  ggplot(aes(x = col, y = row, fill = inc.bloco )) +
  geom_tile(color = "black")+
  geom_text(aes(label = gen))+
  theme_bw()+
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  facet_wrap(~ rep, scales = "free_x")+
  labs(title = "Croqui de campo",
       x= "Colunas", y= "Linhas",
       caption = "SIGM, 2024.")

```

#### Utilizando o pacote desplot()

[Pacote desplot- Acesse documentação em pdf.](https://cloud.r-project.org/web/packages/desplot/desplot.pdf)

```{r}

desplot(data = dados, flip = F,
        form = gen ~ col + row | rep,          
        text = gen, cex = 0.7, shorten = "no", 
        out1 = rep,                            
        out2 = inc.bloco,                      
        main = "Croqui de campo - SIGM 2024.", show.key = T)

```

## Análise descritiva

```{r}

# Funçãoo desc_stat ( ) ----------------------------------------------------
# Para calcular todas as estatísticas de uma só vez


# CV, máximo, média, mediana, mínimo, desvio padrão da amostra
# erro padrão e intervalo de confianca da média

dados %>%
  desc_stat(prod, hist = TRUE, stats = "all")  # stats = "main"= emite 7 tipos de estatísticas

```

#### Análise da repetição

```{r}
dados %>% 
  group_by(rep) %>% 
  summarize(mean    = mean(prod),
            std.dev = sd(prod),
            cv      = std.dev/mean)

```

#### Análise dos blocos incompletos

```{r}

dados %>% 
  group_by(rep, inc.bloco) %>% 
  summarize(mean    = mean(prod),
            std.dev = sd(prod),
            cv      = std.dev/mean)
```

```{r}
plotdata <- dados %>% 
  group_by(gen) %>% 
  mutate(mean_prod = mean(prod)) %>% # add column with mean yield per gen
  ungroup() %>% 
  mutate(gen = fct_reorder(.f = gen, .x = mean_prod)) # sort factor variable by mean yield
```

```{r}
ggplot(data = plotdata, 
       aes(x = gen)) +
  geom_point(aes(y = prod, shape = rep)) +  
  geom_point(aes(y = mean_prod), color = "cornflowerblue") + 
  ylim(0, NA) +   # force y-axis to start at 0
  labs(caption = "Pontos em azul representam a média por genótipo.",
       x= "Genótipo", y="Produção") +
  theme_classic() + # clearer plot format 
  theme(axis.text.x = element_text(angle=90, vjust=0.5)) 


```

```{r}
dados %>% 
  ggplot(aes(x = gen,  y = prod, fill = gen))+
  geom_boxplot()+
  theme_classic()+
  labs(title = "Distribuição da produtividade por genótipo", 
       x= "Genótipo", y= "Produção",
       caption = "SIGM 2024.")
```

```{r}
dados %>% 
  ggplot(aes(x = rep,  y = prod, fill = rep))+
  geom_boxplot()+
  theme_classic()+
  labs(title = "Distribuição da produtividade por genótipo", 
       x= "Repetição", y= "Produção",
       caption = "SIGM 2024.")
```

## Modelagem

#### **Modelo com `gen` como efeito fixo:**

**Qual é o efeito dos genótipos sobre o rendimento?**

```{r}

mod.fg <- lmer(prod ~ gen + rep + (1 | rep:inc.bloco), data = dados)

```

-   **`prod ~ gen`**: `gen` é um efeito fixo porque queremos saber o efeito de cada genótipo.

-   **`(1|bloco)`**: `bloco` é um efeito aleatório, permitindo controlar a variação entre os blocos do experimento dentro de cada repetição.

#### **Modelo com `gen` como efeito aleatório:**

```{r}
mod.rg <- lmer(prod ~ (1 | gen) + rep + (1 | rep:inc.bloco), data = dados)

```

1.  **`(1 | gen)`**: representa um **efeito aleatório** do fator `gen` (genótipos).

2.  **`rep`**: representa um **efeito fixo** do fator `rep` (repetição).

3.  **`(1 | rep:inc.bloco)`**: representa um **efeito aleatório de interação** entre `rep` (repetição) e `inc.bloco` (bloco incompleto)

Isso permite estimar os componentes de variância atribuíveis aos genótipos e não comparar diretamente os níveis de genótipos.

## Análise dos modelos e comparação

#### Resumo do modelo fixo

```{r}
summary(mod.fg, ddf = "Kenward-Roger")

```

#### Resumo do modelo aleatório

```{r}
summary(mod.rg, ddf = "Kenward-Roger")
```

[^1]Kenward-Roger: para calcular os graus de liberdade para os efeitos.

[^1]: Kenward, M.G. e Roger, J. H. (1997). Small Sample Inference for Fixed Effects from Restricted Maximum Likelihood. Biometrics, Vol 53, No. 3 pp 983-997 

#### ANOVA efeitos fixos, usamos:

```{r}
mod.fg %>% anova(ddf = "Kenward-Roger")

```

#### ANOVA efeitos aleatório, usamos:

```{r}
mod.rg %>% anova(ddf = "Kenward-Roger")
```

#### RANOVA para efeitos aleatórios:

```{r}
mod.fg %>% ranova() 
```

```{r}
mod.rg %>% ranova()

```

-   **ANOVA**: compara a significância dos efeitos fixos.

-   **RANOVA**: testa a significância dos componentes de variância aleatórios.

## Estimativa dos Componentes da Variância

```{r}
as.data.frame(VarCorr(mod.fg))
```

```{r}
as.data.frame(VarCorr(mod.rg))
```

## Estimativas BLUEs e BLUPs

#### BLUEs (Best Linear Unbiased Estimators)

Para o modelo com `gen` como fixo, calculamos as médias ajustadas dos genótipos:

```{r}
BLUEs <- emmeans::emmeans(mod.fg, ~ gen) %>%
  as.data.frame() %>%
  transmute(gen, BLUE = emmean, std.error_BLUE = SE)
```

```{r}
head(BLUEs)
```

Intervalo de confiança de 95% em vez de um erro padrão simples, você poderia multiplicar `std.error_BLUE` por 1.96:

```{r}
ggplot2::ggplot(BLUEs, aes(x = gen, y = BLUE)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = BLUE - 1.96 * std.error_BLUE, ymax = BLUE + 1.96 * std.error_BLUE), 
              width = 0.2, color = "gray") +
  labs(title = "Estimativas BLUEs",
       x = "Genótipos", 
       y = "BLUE (Best Linear Unbiased Estimator)",
       caption = "SIGM,2024.") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

#### BLUPs (Best Linear Unbiased Predictors)

Para o modelo `mod.rg`, calculamos os BLUPs dos genótipos:

```{r}
mu_manual <- fixef(mod.rg)[1] + sum(fixef(mod.rg)[2:3])/3

```

```{r}
BLUPs <- augment(ranef(mod.rg)) %>%
  filter(grp == "gen") %>%
  transmute(gen = level, BLUP = mu_manual + estimate, std.error_BLUP = std.error)
```

## Herdabilidade

A herdabilidade indica a proporção da variabilidade fenotípica que é atribuível à variabilidade genética.

#### Herdabilidade Clássica

$$
h^2 = \frac{V_g}{V_g + \frac{V_e}{n}}
$$ onde ( V_g ) é a variância dos genótipos e ( V_e ) é o erro residual.

#### Extração das Componentes da Variância:

```{r}
vcomps <- as.data.frame(VarCorr(mod.rg))

```

#### Seleção da Variância Genética:

```{r}
vc.g <- vcomps[vcomps$grp == "gen", "vcov"]

```

#### Seleção da Variância Residual

```{r}
vc.e <- vcomps[vcomps$grp == "Residual", "vcov"]

```

#### Cálculo da Herdabilidade

```{r}

nreps = 3

hc <- vc.g / (vc.g + vc.e / nreps)

```

#### head herdabilidade

```{r}

head(hc)

```

## Plotando os BLUPs

```{r}

head(BLUPs)
```

#### Cálculo do intervalo de confiança

```{r}

# Nível de confiança (95%)

nivel_confianca <- 0.95
z_value <- qnorm((1 + nivel_confianca) / 2)


```

#### Calcula os limites superior e inferior para o intervalo de confiança

```{r}

BLUPs <- BLUPs %>%
  mutate(
    IC_inferior = BLUP - z_value * std.error_BLUP,
    IC_superior = BLUP + z_value * std.error_BLUP)

BLUPs

```

```{r}
media_blup <- mean(BLUPs$BLUP)

head(media_blup)
```

```{r}
BLUPs <- BLUPs %>%
  arrange(desc(BLUP)) %>%
  mutate(gen = factor(gen, levels = gen))
```

```{r}

ggplot(BLUPs, aes(x = gen, y = BLUP)) +
  geom_bar(stat = "identity", fill = "#588157", color = "black", width = 0.7) +
  geom_errorbar(aes(ymin = IC_inferior, ymax = IC_superior), width = 0.2) +
  geom_hline(yintercept = media_blup, color = "red", linetype = "dashed", size = 0.8) +
  theme_minimal() +
  labs(title = "",
       x = "Genótipos", y = "Valor Predito",
       caption = "SIGM, 2024.") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  

```

```{r}
# Calcula a distância euclidiana
blup_values <- BLUPs$BLUP
names(blup_values) <- BLUPs$gen  # Nomeia cada valor com o genótipo correspondente
```

```{r}

dist_blups <- dist(blup_values, method = "euclidean")  # Distância euclidiana

# Aplica a clusterização hierárquica usando UPGMA
hc <- hclust(dist_blups, method = "average")  # UPGMA (média)


```

```{r}
# Define o valor de Mojena para o ponto de corte
c_value <- 1.25  # Valor sugerido
heights <- hc$height
cut_height <- mean(heights) + c_value * sd(heights)
```

```{r}

# Plot do dendrograma com o ponto de corte de Mojena
plot(hc, main = "Dendrograma", 
     xlab = "Genótipos", ylab = "Distância", cex = 0.8, sub = "")

abline(h = cut_height, col = "red", lty = 2, lwd = 1.5)  # Linha de corte

# Determina os clusters com o ponto de corte de Mojena
cluster_groups <- cutree(hc, h = cut_height)

# Adiciona os clusters ao data frame
BLUPs <- BLUPs %>% mutate(cluster = factor(cluster_groups[gen]))

# Exibe o data frame com as informações dos clusters
head(BLUPs)

```

```{r}
cophenetic_dist <- cophenetic(hc)

# Calcula a correlação cofenética

correlation_cophenetic <- cor(dist_blups, cophenetic_dist)

print(paste("Correlação cofenética:", round(correlation_cophenetic, 4)))
```

## Regressão

```{r}
raw_m <- dados %>% 
  group_by(gen) %>% 
  summarize(mean    = mean(prod),
            std.dev = sd(prod),
            cv      = std.dev/mean, 
            n = n() ,
            n_mis = sum(is.na(prod))) 
raw_m
```

```{r}
pvals <- merge(BLUEs, BLUPs, by = "gen")
pvals <- merge(pvals, raw_m, by = "gen")
```

```{r}
pvals %>% 
  ggplot(aes(x = BLUE, y = BLUP))+
  geom_smooth(se = F, color = "red",  size = 0.8, method = "lm", formula = y ~ x )+
  geom_abline(slope = 1, intercept = 0, color = "black", size = 0.8, linetype = 2)+
  geom_point(size = 3, alpha = 0.5)+
  stat_regline_equation()+
  theme_bw()+
  coord_fixed()
```
